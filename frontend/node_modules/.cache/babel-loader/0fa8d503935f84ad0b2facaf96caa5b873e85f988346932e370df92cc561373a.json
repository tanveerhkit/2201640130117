{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LoggingClient = void 0;\nconst cross_fetch_1 = __importDefault(require(\"cross-fetch\"));\nclass LoggingClient {\n  constructor() {\n    let cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var _a, _b, _c;\n    this.baseURL = ((_a = cfg.baseURL) !== null && _a !== void 0 ? _a : \"http://20.244.56.144\").replace(/\\/$/, \"\");\n    this.logPath = (_b = cfg.logPath) !== null && _b !== void 0 ? _b : \"/evaluation-service/logs\";\n    this.authPath = (_c = cfg.authPath) !== null && _c !== void 0 ? _c : \"/evaluation-service/auth\";\n    this.accessToken = cfg.accessToken;\n    if (!cfg.accessToken) {\n      // Allow backend to supply credentials for token fetch.\n      const {\n        email,\n        name,\n        rollNo,\n        accessCode,\n        clientID,\n        clientSecret\n      } = cfg;\n      if (email && name && rollNo && accessCode && clientID && clientSecret) {\n        this.creds = {\n          email,\n          name,\n          rollNo,\n          accessCode,\n          clientID,\n          clientSecret\n        };\n      }\n    }\n  }\n  isTokenValid() {\n    if (!this.accessToken || !this.tokenExpiry) return false;\n    const now = Math.floor(Date.now() / 1000);\n    // Refresh 60s early\n    return now < this.tokenExpiry - 60;\n  }\n  async ensureToken() {\n    if (this.isTokenValid()) return this.accessToken;\n    if (!this.creds) return this.accessToken; // frontend mode: use provided token as-is\n    const url = \"\".concat(this.baseURL).concat(this.authPath);\n    const res = await (0, cross_fetch_1.default)(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(this.creds)\n    });\n    if (!res.ok) {\n      // Do not throw to avoid breaking apps; swallow but return undefined\n      return this.accessToken;\n    }\n    const data = await res.json();\n    this.accessToken = data.access_token;\n    this.tokenExpiry = data.expires_in;\n    return this.accessToken;\n  }\n  async log(input) {\n    try {\n      await this.ensureToken();\n      const url = \"\".concat(this.baseURL).concat(this.logPath);\n      const headers = {\n        \"Content-Type\": \"application/json\"\n      };\n      if (this.accessToken) headers[\"Authorization\"] = \"Bearer \".concat(this.accessToken);\n      const res = await (0, cross_fetch_1.default)(url, {\n        method: \"POST\",\n        headers,\n        body: JSON.stringify(input)\n      });\n      // Avoid throwing; the consumer shouldn't break from logging failures.\n      // If needed, response could be inspected by callers later via a callback.\n      void res; // no-op\n    } catch (_unused) {\n      // Swallow errors to keep middleware safe and non-disruptive.\n    }\n  }\n}\nexports.LoggingClient = LoggingClient;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","LoggingClient","cross_fetch_1","require","constructor","cfg","arguments","length","undefined","_a","_b","_c","baseURL","replace","logPath","authPath","accessToken","email","name","rollNo","accessCode","clientID","clientSecret","creds","isTokenValid","tokenExpiry","now","Math","floor","Date","ensureToken","url","concat","res","default","method","headers","body","JSON","stringify","ok","data","json","access_token","expires_in","log","input","_unused"],"sources":["/Users/naushadvali/Desktop/tanveer/logging-middleware/dist/client.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LoggingClient = void 0;\nconst cross_fetch_1 = __importDefault(require(\"cross-fetch\"));\nclass LoggingClient {\n    constructor(cfg = {}) {\n        var _a, _b, _c;\n        this.baseURL = ((_a = cfg.baseURL) !== null && _a !== void 0 ? _a : \"http://20.244.56.144\").replace(/\\/$/, \"\");\n        this.logPath = (_b = cfg.logPath) !== null && _b !== void 0 ? _b : \"/evaluation-service/logs\";\n        this.authPath = (_c = cfg.authPath) !== null && _c !== void 0 ? _c : \"/evaluation-service/auth\";\n        this.accessToken = cfg.accessToken;\n        if (!cfg.accessToken) {\n            // Allow backend to supply credentials for token fetch.\n            const { email, name, rollNo, accessCode, clientID, clientSecret } = cfg;\n            if (email && name && rollNo && accessCode && clientID && clientSecret) {\n                this.creds = { email, name, rollNo, accessCode, clientID, clientSecret };\n            }\n        }\n    }\n    isTokenValid() {\n        if (!this.accessToken || !this.tokenExpiry)\n            return false;\n        const now = Math.floor(Date.now() / 1000);\n        // Refresh 60s early\n        return now < this.tokenExpiry - 60;\n    }\n    async ensureToken() {\n        if (this.isTokenValid())\n            return this.accessToken;\n        if (!this.creds)\n            return this.accessToken; // frontend mode: use provided token as-is\n        const url = `${this.baseURL}${this.authPath}`;\n        const res = await (0, cross_fetch_1.default)(url, {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(this.creds),\n        });\n        if (!res.ok) {\n            // Do not throw to avoid breaking apps; swallow but return undefined\n            return this.accessToken;\n        }\n        const data = (await res.json());\n        this.accessToken = data.access_token;\n        this.tokenExpiry = data.expires_in;\n        return this.accessToken;\n    }\n    async log(input) {\n        try {\n            await this.ensureToken();\n            const url = `${this.baseURL}${this.logPath}`;\n            const headers = { \"Content-Type\": \"application/json\" };\n            if (this.accessToken)\n                headers[\"Authorization\"] = `Bearer ${this.accessToken}`;\n            const res = await (0, cross_fetch_1.default)(url, {\n                method: \"POST\",\n                headers,\n                body: JSON.stringify(input),\n            });\n            // Avoid throwing; the consumer shouldn't break from logging failures.\n            // If needed, response could be inspected by callers later via a callback.\n            void res; // no-op\n        }\n        catch {\n            // Swallow errors to keep middleware safe and non-disruptive.\n        }\n    }\n}\nexports.LoggingClient = LoggingClient;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}